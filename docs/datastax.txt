http://docs.datastax.com/en/cassandra/3.0/cassandra/architecture/archTOC.html
Understanding the architecture

Architecture in brief
在多个节点间处理海量数据，没有单点失败。考虑到系统和硬件的损坏是正常会发生的。cassandra在大量节点中构建一个p2p（点对点的对等网络）分布式系统，
数据就分布在集群中这所有的节点上。每个节点频繁地和集群中的其它节点交换自身的状态信息，使用p2p绯闻通信协议。每个节点的写操作按顺序写入commit log，
来确保数据的持久化。数据然后被索引和写入一个内存数据结构，叫做memtable，类似一个回写缓存。每次这个内存结构满的时候，数据被写入磁盘上的一个SSTable
数据文件中。所有的写操作在集群中自动的分区和复制。cassandra周期性地整理SSTable，使用一个叫做compaction的进程，丢弃使用tombstone（墓碑）标记为删除的数据
为了保证集群中所有数据的一致性，许多不同的修复机制被采用。
cassandra是一个分区的行式存储数据库，行被组织到表里面且带有主键。允许连接到任何数据中心的任何节点，使用CQL语言，和SQL相似。典型地，集群中的每个应用有一个
键空间，里面包含许多不同的表。
客户端的读写请求可以发送到集群中的任何节点，客户端连接到的那个节点就像该客户端的协调员，协调员充当一个代理，位于客户端和拥有请求数据的节点之间。
协调员基于集群的配置决定环中的哪个节点该处理这个请求。
节点，数据存储的地方，是基本的基础设施组件。
数据中心，许多相关节点构成的一个集合。可以是物理的数据中心或虚拟的数据中心。不同的工作负载应该使用分离的数据中心，要么物理或者虚拟。复制是通过数据中心设置的。
使用分离的数据中心阻止事务的相互冲撞，使请求更加接近和更低的延时。基于复制因子，数据能被写到多个数据中心。数据中心不能跨越物理位置。
集群，一个集群包含一到多个数据中心，集群可以跨越物理位置。
commit log，所有数据首先写入commit log进行持久化。当所有的数据都被刷入磁盘的SSTable文件中时，commit log可以被存档、删除或回收。
SSTable，一个有序的字符串表（sorted string table），是一个不可变的数据文件，memtable被周期性的写入SSTable。SSTable是只能追加的，按顺序存储在磁盘上。为每个表
单独维护SSTable。
Gossip，一个p2p通信协议，用于发现和共享集群中其它节点的位置和状态信息。在节点准备重启时Gossip信息会被持久化到本地，为了重启后可以立即使用这些信息。
Partitioner，分割器决定哪个节点将接收数据的第一个复制副本，如何分发其它副本到集群中的其它节点。每一行数据由主键唯一标识，可能和它的分区key一样，分区key也可能
包含其它列。分割器是一个哈希函数，从一行的主键推导出一个token。分割器使用这个token来决定集群中的哪个节点接收这行的副本。Murmur3Partitioner是新集群的默认分区
策略，几乎在所有情况下都是新集群的正确选择
Replication factor，集群中副本的总数，所有的副本都同等重要，没有主副本、从副本之说。每个数据中心定义复制因子。通常大于1。
Replica placement strategy，在多个节点存储数据副本确保可靠性和容错性。复制策略决定哪个节点放置副本。强烈建议在大多数部署时采用NetworkTopologyStrategy，因为
在以后扩展时，它非常容易扩展到多数据中心。当创建一个keyspace时，必须定义副本放置策略和副本数目。
Snitch，告密，一个snitch定义进入数据中心或机架中的机器组，复制策略使用它来放置副本。当创建一个集群时必须配置一个snitch，所有的snitch使用一个动态snitch层，监控
性能和选择最好的副本来读。默认启用且在大多数部署时建议使用。默认的SimpleSnitch不能识别数据中心或机架信息，用于单数据中心部署，GossipingPropertyFileSnitch建议
用于生产环境，定义了一个节点的数据中心和机架，使用绯闻协议把这些信息传播给其它节点。

Internode communications (gossip)
Gossip是一个p2p通信协议，节点之间周期性地交换有关自身和它们知道的其它节点的状态信息。gossip进程每秒运行一次，和集群中的其它三个节点交换状态信息，节点交换自身的
信息和它们以前已经交换（gossip）过的那些节点的信息，因此所有的节点快速地了解到集群中的其它节点。一个gossip消息关联一个版本号，因此在交换期间，一个节点的旧的信息
将使用最新的信息进行重写。
为了阻止通信间的错误，集群中的所有节点使用相同的种子节点列表，这非常关键当一个节点首次启动时。默认一个节点会记住它已经交换过信息的其它节点，在后续的重启中。种子
节点的指定没有其它目的，除了引导新加入集群中的节点的gossip处理。种子节点除了引导之外没有其它特殊目的。
注意，在多个数据中心集群里，每个数据中心至少要有一个节点在种子列表里。建议每个数据中心指定多于一个种子节点用于容错。否则在一个数据中心中引导一个节点时不得不和其它
数据中心的节点通信。把每个节点都变成种子节点是不建议的，因为增加了维护且减少了gossip性能，建议使用一个小的种子列表（大约每个数据中心3个节点）。

Data distribution and replication
数据分发和复制是一起进行的。数据按表组织，使用主键标识，主键决定数据存储到哪个节点上，复制是对行的拷贝。当数据第一次被写入时，它也被称为是一个副本，即只有一份数据
时也叫做副本。影响复制的因素包括，虚拟节点（用于一致性哈希），分割器，复制策略，Snitch。

Partitioners
分割器决定数据如何在集群中的节点间分发。一个分割器是一个函数，从一行的分区key推导出一个token用来表示这一行，典型地像哈希函数。每行数据使用token值在集群中进行分发。
分派相同的数据量到每个节点，均匀地分发来自于所有表的数据，遍及整个环或其它分组，例如一个keyspace。除此之外，对于集群的读写请求也是均匀地分发，负载均衡被简化，因为
整个哈希范围的每一部分平均接收到相同的数据行数。

Snitches
一个snitch决定节点属于哪个数据中心和机架，它们告知cassandra相关的网络拓扑，因此请求可以有效地路由，允许cassandra分发副本通过分组进入数据中心和机架中的机器。复制
策略基于新的 snitch提供的信息放置副本。所有的节点必须返回相同的机架和数据中心。cassandra尽力不让同一个机架上有多于一个的副本（尽力把副本放到不同的机架上）

